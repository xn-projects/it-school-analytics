# -*- coding: utf-8 -*-
"""02_descriptive_statistics..ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jkJ8ASJsdYxuucRdt7VhyCBfWgXY_iaq
"""

pip install dataframe-image

# Commented out IPython magic to ensure Python compatibility.
!git clone -q https://github.com/xn-projects/it-school-analytics.git
# %cd it-school-analytics

from utils import (
    setup_logging,
    show_df,
    log_section,
    load_files,
    save_table_as_png,
    save_plot,
    save_clean_data,
    get_my_palette,
    cmap_cornflower,
    cmap_lime,
    cmap_tomato,
    cmap_yellow,
    cmap_lavender,
    cmap_neutral,
    describe_num,
    describe_cat,
    plot_change,
    compare_distributions,
    summarize_category
)

import logging
import os
import warnings
import time

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import matplotlib.patches as mpatches
from matplotlib.colors import LinearSegmentedColormap
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from scipy.stats import skew, kurtosis

import dataframe_image as dfi
from IPython.display import HTML, display

warnings.filterwarnings('ignore')

setup_logging()
logging.info('Repository successfully loaded and ready')

log_section('=== Downloading source Excel files ===')

base_url = 'https://raw.githubusercontent.com/xn-projects/it-school-analytics/main/data/clean/'
files = ['calls_clean.xlsx', 'contacts_clean.xlsx', 'deals_clean.xlsx', 'spend_clean.xlsx']

download = load_files(base_url, files)
logging.info(f'Downloaded {len(download)} files successfully.')

log_section('=== Reading Excel files ===')

df_calls = pd.read_excel(f'/content/it-school-analytics/data/clean/calls_clean.xlsx', dtype={'Id': str, 'CONTACTID':str}, engine='openpyxl')
df_contacts = pd.read_excel(f'/content/it-school-analytics/data/clean/contacts_clean.xlsx', dtype={'Id': str}, engine='openpyxl')
df_deals = pd.read_excel(f'/content/it-school-analytics/data/clean/deals_clean.xlsx', dtype={'Id': str, 'Contact Name':str}, engine='openpyxl')
df_spend = pd.read_excel(f'/content/it-school-analytics/data/clean/spend_clean.xlsx', engine='openpyxl')

logging.info('All files successfully loaded into DataFrames.')

log_section('=== Descriptive statistics for Calls Data ===')
start_time = time.time()

"""##### Numeric fields"""

calls = describe_num(df_calls, df_name='calls')

df_calls['Call Duration (log)'] = np.log1p(df_calls['Call Duration (in seconds)'])

lime = get_my_palette(group='Lime Green')[4]
cornflower = get_my_palette(group='Cornflower')[2]

fig, axes = plt.subplots(1, 2, figsize=(12, 4), facecolor='white')

sns.histplot(
    df_calls['Call Duration (in seconds)'],
    bins=50, kde=True, color=lime, ax=axes[0]
)
axes[0].set_title('Before Log Transformation', fontsize=12)
axes[0].set_xlabel('Duration (seconds)')
axes[0].set_ylabel('Frequency')

sns.histplot(
    df_calls['Call Duration (log)'],
    bins=50, kde=True, color=cornflower, ax=axes[1]
)
axes[1].set_title('After Log Transformation', fontsize=12)
axes[1].set_xlabel('Log(Duration)')
axes[1].set_ylabel('Frequency')

plt.suptitle('Call Duration Distribution — Original vs Log', fontsize=14, fontweight='bold')
plt.tight_layout()

save_plot('call_duration_orig_vs_log', subfolder='notebooks')
plt.show()

logging.info('Plot Call Duration Distribution — Original vs Log saved successfully.')

lime = get_my_palette(group='Lime Green')[2]
cornflower = get_my_palette(group='Cornflower')[2]

fig, axes = plt.subplots(1, 2, figsize=(10, 5), facecolor='white')

sns.violinplot(
    y=df_calls['Call Duration (in seconds)'],
    color=lime,
    inner='quartile',
    linewidth=1,
    ax=axes[0]
)
axes[0].set_title('Before Log Transformation', fontsize=12)
axes[0].set_ylabel('Duration (seconds)')

sns.violinplot(
    y=df_calls['Call Duration (log)'],
    color=cornflower,
    inner='quartile',
    linewidth=1,
    ax=axes[1]
)
axes[1].set_title('After Log Transformation', fontsize=12)
axes[1].set_ylabel('Log(Duration)')

plt.suptitle('Call Duration Distribution', fontsize=14, fontweight='bold')
plt.tight_layout()

save_plot('call_duration_distribution', subfolder='notebooks')
plt.show()

logging.info('Plot Call Duration Distribution — Original vs Log saved successfully.')

compare_calls = compare_distributions(df_calls, 'Call Duration (in seconds)', 'Call Duration (log)', df_name='calls')
show_df(compare_calls)

delta_calls = plot_change(compare_calls, name='call_change', subfolder='notebooks')

"""##### Categorical fields"""

calls_new = describe_cat(df_calls, df_name='Calls')

owners = (
    df_calls
    .groupby('Call Owner Name', as_index=False)
    .agg(
        Calls=('CONTACTID', 'size'),
        UniqueContacts=('CONTACTID', 'nunique')
    )
)

exclusive_mask = (
    df_calls.groupby('CONTACTID')['Call Owner Name']
    .nunique()
    .eq(1)
)

exclusive_df = (
    df_calls[df_calls['CONTACTID'].isin(exclusive_mask[exclusive_mask].index)]
    .groupby('Call Owner Name', as_index=False)
    .agg(ExclusiveContacts=('CONTACTID', 'nunique'))
)

owners = owners.merge(exclusive_df, on='Call Owner Name', how='left').fillna(0)
owners['ExclusiveShare (%)'] = owners['ExclusiveContacts'] / owners['UniqueContacts'] * 100
owners = owners.sort_values('Calls', ascending=False)

owners.head(33)

contact_owners = (
    df_calls.groupby('CONTACTID')['Call Owner Name']
    .nunique()
    .value_counts()
    .sort_index()
)
contact_owners

unique_df = (
    df_calls.groupby('Call Owner Name', as_index=False)
    .agg(UniqueContacts=('CONTACTID', 'nunique'))
)

exclusive_mask = (
    df_calls.groupby('CONTACTID')['Call Owner Name']
    .nunique()
    .eq(1)
)

exclusive_df = (
    df_calls[df_calls['CONTACTID'].isin(exclusive_mask[exclusive_mask].index)]
    .groupby('Call Owner Name', as_index=False)
    .agg(ExclusiveContacts=('CONTACTID', 'nunique'))
)

owners = df_calls['Call Owner Name'].value_counts().head(15).reset_index()
owners.columns = ['Call Owner Name', 'Count']

owners = owners.merge(unique_df, on='Call Owner Name', how='left')
owners = owners.merge(exclusive_df, on='Call Owner Name', how='left').fillna(0)

total_color = get_my_palette(group='Lavender')[2]
exclusive_color = get_my_palette(group='Yellowsoft')[2]
unique_color = get_my_palette(group='Tomato')[2]


plt.figure(figsize=(9, 6))
ax = plt.gca()

sns.barplot(
    data=owners,
    x='Count',
    y='Call Owner Name',
    color=total_color,
    ax=ax,
    label='Total Calls'
)

for i, (count, excl) in enumerate(zip(owners['Count'], owners['ExclusiveContacts'])):
    ax.barh(i, excl, color=exclusive_color, height=0.8, label='Exclusive Clients' if i == 0 else "")

for i, uniq in enumerate(owners['UniqueContacts']):
    ax.barh(i, uniq, color=unique_color, height=0.8, alpha=0.5, label='Unique Clients' if i == 0 else "")

for i, (count, excl, uniq) in enumerate(zip(owners['Count'], owners['ExclusiveContacts'], owners['UniqueContacts'])):
    ax.text(count + 50, i, f'{int(count):,}', va='center', ha='left', fontsize=9)
    ax.text(excl + 50, i, f'{int(excl):,}', va='center', ha='left', fontsize=9)
    ax.text(uniq + 50, i, f'{int(uniq):,}', va='center', ha='left', fontsize=9, color='white', fontweight='bold')

plt.title('Top 15 Call Owners by Calls (Exclusive & Unique Clients)', fontsize=13, fontweight='bold', pad=10)
plt.xlabel('Number of Calls / Clients', fontsize=10)
plt.ylabel('')
plt.xticks(fontsize=9)
plt.yticks(fontsize=9)
plt.grid(axis='x', linestyle=':', alpha=0.4)

for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)

legend_handles = [
    mpatches.Patch(color=total_color, label='Total Calls'),
    mpatches.Patch(color=exclusive_color, label='Exclusive Clients'),
    mpatches.Patch(color=unique_color, label='Unique Clients')
]
plt.legend(
    handles=legend_handles,
    loc='lower right',
    fontsize=9,
    frameon=False,
    title='Categories',
    title_fontsize=10
)

plt.tight_layout()

save_plot('call_owners', subfolder='notebooks')
plt.show()

logging.info('Plot Top 15 Call Owners by Calls (Exclusive & Unique Clients) saved successfully.')

log_section('=== Descriptive statistics for Contacts Data ===')
start_time = time.time()

"""##### Numeric fields"""

contacts = describe_num(df_contacts, df_name='contacts')

"""##### Categorical fields"""

contacts_new = describe_cat(df_contacts, df_name='Contacts')

aggregated_data = (
    df_contacts.groupby('Contact Owner Name')
    .agg(Frequency=('Id', 'count'))
    .sort_values(by='Frequency', ascending=False)
    .head(15)
    .reset_index()
)

lavender = get_my_palette(group='Lavender')
lavender_cmap = LinearSegmentedColormap.from_list('lavender', lavender)
lavender_gradient = [lavender_cmap(i / (len(owners) - 1)) for i in range(len(owners))]

plt.figure(figsize=(9, 6))
ax = sns.barplot(
    data=aggregated_data,
    x='Frequency',
    y='Contact Owner Name',
    palette=lavender_gradient[::-1]
)

for i, v in enumerate(aggregated_data['Frequency']):
    ax.text(v + 10, i, str(v), va='center', ha='left', fontsize=9)

plt.title('Top 15 Contact Owners by Frequency', fontsize=13, fontweight='bold', pad=10)
plt.xlabel('Number of Contacts (Frequency)', fontsize=10)
plt.ylabel('')
plt.xticks(fontsize=9)
plt.yticks(fontsize=9)
plt.grid(axis='x', linestyle=':', alpha=0.4)
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)

plt.tight_layout()

save_plot('contacts_owners', subfolder='notebooks')
plt.show()

logging.info('Plot Top 15 Contact Owners by Frequency saved successfully.')

log_section('=== Descriptive statistics for Spend Data ===')
start_time = time.time()

"""##### Numeric fields"""

spend = describe_num(df_spend, df_name='spend')

"""##### 1. Impressions"""

df_spend['Impressions (log)'] = np.log1p(df_spend['Impressions'])

df_spend['Clicks (log)'] = np.log1p(df_spend['Clicks'])

df_spend['Spend (log)'] = np.log1p(df_spend['Spend'])

lime = get_my_palette(group='Lime Green')[4]
cornflower = get_my_palette(group='Cornflower')[2]

metrics = [
    ('Impressions', 'Impressions (log)'),
    ('Clicks', 'Clicks (log)'),
    ('Spend', 'Spend (log)')
]

fig, axes = plt.subplots(
    nrows=len(metrics), ncols=2,
    figsize=(12, 10),
    facecolor='white',
    constrained_layout=True
)

for i, (orig_col, log_col) in enumerate(metrics):
    sns.histplot(df_spend[orig_col], bins=50, kde=True, color=lime, ax=axes[i, 0])
    axes[i, 0].set_title(f'{orig_col} — Before Log', fontsize=11)
    axes[i, 0].set_xlabel('')
    axes[i, 0].set_ylabel('Frequency')

    sns.histplot(df_spend[log_col], bins=50, kde=True, color=cornflower, ax=axes[i, 1])
    axes[i, 1].set_title(f'{orig_col} — After Log', fontsize=11)
    axes[i, 1].set_xlabel('')
    axes[i, 1].set_ylabel('Frequency')


plt.suptitle('Distributions Before and After Log Transformation', fontsize=14, fontweight='bold', y=0.98)

plt.tight_layout(rect=[0, 0, 1, 0.96])

save_plot('spend_all_metrics_orig_vs_log', subfolder='notebooks')
plt.show()

logging.info('Plot Spend Metrics — Original vs Log saved successfully.')

lime = get_my_palette(group='Lime Green')[2]
cornflower = get_my_palette(group='Cornflower')[2]

metrics = [
    ('Impressions', 'Impressions (log)'),
    ('Clicks', 'Clicks (log)'),
    ('Spend', 'Spend (log)')
]

fig, axes = plt.subplots(
    nrows=len(metrics), ncols=2,
    figsize=(10, 10),
    facecolor='white'
)

for i, (orig_col, log_col) in enumerate(metrics):
    sns.violinplot(
        y=df_spend[orig_col],
        color=lime,
        inner='quartile',
        linewidth=1,
        ax=axes[i, 0]
    )
    axes[i, 0].set_title(f'{orig_col} — Before Log', fontsize=12)
    axes[i, 0].set_ylabel(orig_col)
    axes[i, 0].set_xlabel('')

    sns.violinplot(
        y=df_spend[log_col],
        color=cornflower,
        inner='quartile',
        linewidth=1,
        ax=axes[i, 1]
    )
    axes[i, 1].set_title(f'{orig_col} — After Log', fontsize=12)
    axes[i, 1].set_ylabel(f'Log({orig_col})')
    axes[i, 1].set_xlabel('')

plt.suptitle('Distributions Before and After Log Transformation', fontsize=14, fontweight='bold', y=0.98)

plt.tight_layout(rect=[0, 0, 1, 0.96])

save_plot('spend_violin_all_metrics', subfolder='notebooks')
plt.show()

logging.info('Plot Spend Metrics — Violin Distributions saved successfully.')

cols = ['Spend', 'Impressions', 'Clicks']

my_color = get_my_palette(group='Lime Green')[3]

pair = sns.pairplot(
    df_spend[cols],
    diag_kind='kde',
    corner=False,
    plot_kws=dict(s=30, alpha=0.7, color=my_color, edgecolor='white')
)

pair.fig.suptitle(
    'Spend Data — Correlation Matrix',
    fontsize=14,
    fontweight='bold',
    y=1.02
)

plt.tight_layout()

save_plot('spend_correlation_matrix', subfolder='notebooks')
plt.show()

logging.info('Plot Spend — Correlation Matrix saved successfully.')

"""##### 1. Impressions"""

compare_imp = compare_distributions(df_spend, 'Impressions', 'Impressions (log)', df_name='spend')
show_df(compare_imp)

delta_spend = plot_change(compare_imp, name='impressions_change', subfolder='notebooks')

"""##### 2. Clicks"""

compare_clicks = compare_distributions(df_spend, 'Clicks', 'Clicks (log)', df_name='spend')
show_df(compare_clicks)

delta_spend = plot_change(compare_clicks, name='click_change', subfolder='notebooks')

"""##### 3. Spend"""

compare_spend = compare_distributions(df_spend, 'Spend', 'Spend (log)', df_name='spend')
show_df(compare_spend)

delta_spend = plot_change(compare_spend, name='spend_change', subfolder='notebooks')

"""##### Categorical fields"""

spend_new = describe_cat(df_spend, df_name='Spend')

cols = ['Source', 'Campaign', 'AdGroup','Ad']
palettes = ['Tomato', 'Cornflower', 'Yellowsoft', 'Lavender']

fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=[f"{col} — Category Distribution" for col in cols],
    horizontal_spacing=0.25,
    vertical_spacing=0.15
)

for i, (col, palette_group) in enumerate(zip(cols, palettes), start=1):
    summary = (
        df_spend[col]
        .value_counts(dropna=False)
        .head(10)
        .rename_axis('Category')
        .reset_index(name='Count')
        .rename(columns={'Category': col})
    )

    total = summary['Count'].sum()
    summary['Percent'] = (summary['Count'] / total * 100).round(2)
    summary = summary.sort_values('Count', ascending=True)

    my_colors = get_my_palette(group=palette_group)

    row = (i - 1) // 2 + 1
    col_pos = (i - 1) % 2 + 1

    fig.add_trace(
        go.Bar(
            x=summary['Count'],
            y=summary[col],
            orientation='h',
            text=summary['Percent'].astype(str) + '%',
            textposition='outside',
            marker=dict(
                color=summary['Percent'],
                colorscale=my_colors,
                line=dict(color='white', width=1)
            ),
            name=col
        ),
        row=row, col=col_pos
    )
fig.update_traces(textposition='outside', cliponaxis=False)
fig.update_layout(margin=dict(l=80, r=150, t=80, b=50))

fig.update_layout(
    template='plotly_white',
    height=800,
    width=1200,
    showlegend=False,
    title_text='Category Distributions',
    title_font=dict(size=20),
    font=dict(size=12),
)

fig.update_yaxes(title='', automargin=True)
fig.update_xaxes(title='Count')

save_plot('category_spend_distribution', subfolder='notebooks')
fig.show()

log_section('=== Descriptive statistics for Deals Data ===')
start_time = time.time()

"""##### Numeric fields"""

deals = describe_num(df_deals, df_name='deals')

df_deals['Initial Amount Paid (log)'] = np.log1p(df_deals['Initial Amount Paid'])

df_deals['Offer Total Amount (log)'] = np.log1p(df_deals['Offer Total Amount'])

df_deals['SLA Hours (log)'] = np.log1p(df_deals['SLA Hours'])

lime = get_my_palette(group='Lime Green')[4]
cornflower = get_my_palette(group='Cornflower')[2]

metrics = [
    ('Initial Amount Paid', 'Initial Amount Paid (log)'),
    ('SLA Hours', 'SLA Hours (log)')
]

for orig, log_col in metrics:
    if log_col not in df_deals.columns and orig in df_deals.columns:
        df_deals[log_col] = np.log1p(df_deals[orig])

fig, axes = plt.subplots(
    nrows=len(metrics), ncols=2,
    figsize=(10, 8),
    facecolor='white'
)

for i, (orig_col, log_col) in enumerate(metrics):
    sns.histplot(df_deals[orig_col], bins=50, kde=True, color=lime, ax=axes[i, 0])
    axes[i, 0].set_title(f'{orig_col} — Before Log', fontsize=11)
    axes[i, 0].set_xlabel('')
    axes[i, 0].set_ylabel('Frequency')

    sns.histplot(df_deals[log_col], bins=50, kde=True, color=cornflower, ax=axes[i, 1])
    axes[i, 1].set_title(f'{orig_col} — After Log', fontsize=11)
    axes[i, 1].set_xlabel('')
    axes[i, 1].set_ylabel('Frequency')

plt.suptitle('Deals — Distributions Before and After Log Transformation', fontsize=15, fontweight='bold', y=0.98)

plt.tight_layout(rect=[0, 0, 1, 0.96])

save_plot('deals_all_metrics_orig_vs_log', subfolder='notebooks')
plt.show()

logging.info('Plot Deals Metrics — Original vs Log saved successfully.')

lime = get_my_palette(group='Lime Green')[2]
cornflower = get_my_palette(group='Cornflower')[2]

metrics = [
    ('Initial Amount Paid', 'Initial Amount Paid (log)'),
    ('SLA Hours', 'SLA Hours (log)')
]

for orig_col, log_col in metrics:
    if log_col not in df_deals.columns and orig_col in df_deals.columns:
        df_deals[log_col] = np.log1p(df_deals[orig_col])

fig, axes = plt.subplots(
    nrows=len(metrics), ncols=2,
    figsize=(10, 8),
    facecolor='white'
)

for i, (orig_col, log_col) in enumerate(metrics):
    sns.violinplot(
        y=df_deals[orig_col],
        color=lime,
        inner='quartile',
        linewidth=1,
        ax=axes[i, 0]
    )
    axes[i, 0].set_title(f'{orig_col} — Before Log', fontsize=12)
    axes[i, 0].set_ylabel(orig_col)
    axes[i, 0].set_xlabel('')

    sns.violinplot(
        y=df_deals[log_col],
        color=cornflower,
        inner='quartile',
        linewidth=1,
        ax=axes[i, 1]
    )
    axes[i, 1].set_title(f'{orig_col} — After Log', fontsize=12)
    axes[i, 1].set_ylabel(f'Log({orig_col})')
    axes[i, 1].set_xlabel('')

plt.suptitle(
    'Deals — Distributions Before and After Log Transformation',
    fontsize=14,
    fontweight='bold',
    y=0.98
)

plt.tight_layout(rect=[0, 0, 1, 0.96])

save_plot('deals_violin_all_metrics', subfolder='notebooks')
plt.show()

logging.info('Plot Deals Metrics — Violin Distributions saved successfully.')

gradient_colors = [
    get_my_palette(group='Tomato')[3],
    get_my_palette(group='Yellowsoft')[3],
    get_my_palette(group='Lavender')[3],
    get_my_palette(group='Cornflower')[3],
    get_my_palette(group='Lime Green')[3],
]

cmap_custom = LinearSegmentedColormap.from_list("smooth_custom", gradient_colors, N=256)

plt.figure(figsize=(8, 6))
ax = sns.heatmap(
    df_deals[['Course duration', 'Months of study', 'Initial Amount Paid', 'Offer Total Amount', 'SLA Seconds']].corr(),
    annot=True,
    fmt=".3f",
    cmap=cmap_custom,
    center=0,
    annot_kws={"size": 10},
    linewidths=0.5,
    cbar_kws={"shrink": 0.7, "label": "Correlation"}
)

cbar = ax.collections[0].colorbar
cbar.ax.tick_params(labelsize=8)
cbar.set_label('Correlation', fontsize=10)

plt.title('Correlation Matrix (deals)', fontsize=14, fontweight='bold', pad=10)
plt.xticks(rotation=40, ha='right', fontsize=9)
plt.yticks(rotation=0, fontsize=9)
plt.tight_layout()

save_plot('deals_correlation_matrix_custom', subfolder='notebooks')
plt.show()

"""##### 1. Initial Amount Paid"""

compare_iap = compare_distributions(df_deals, 'Initial Amount Paid', 'Initial Amount Paid (log)', df_name='deals')
show_df(compare_iap)

delta_deals = plot_change(compare_spend, name='iap_change', subfolder='notebooks')

"""##### 2. SLA"""

compare_sla = compare_distributions(df_deals, 'SLA Hours', 'SLA Hours (log)', df_name='deals')
show_df(compare_sla)

delta_deals = plot_change(compare_spend, name='sla_change', subfolder='notebooks')

"""##### Categorical fields"""

deals_new = describe_cat(df_deals, df_name='Deals')

top_stages = (
    df_deals["Stage"].str.strip()
    .value_counts()
    .head(5)
    .index
)
df_tree = df_deals[df_deals["Stage"].str.strip().isin(top_stages)].copy()
df_tree["Stage"] = df_tree["Stage"].str.strip()

cornflower = get_my_palette(group='Cornflower')
yellow = get_my_palette(group='Yellowsoft')
lavender = get_my_palette(group='Lavender')
tomato = get_my_palette(group='Tomato')
lime = get_my_palette(group='Lime Green')
neutral = get_my_palette(group='Neutral')

stage_colors = {
    top_stages[0]: tomato[2],
    top_stages[4]: neutral[3],
    top_stages[1]: yellow[2],
    top_stages[2]: lavender[3],
    top_stages[3]: lime[3],
}

fig = px.treemap(
    df_tree,
    path=["Source", "Stage"],
    color="Stage",
    color_discrete_map=stage_colors,
    title="Top 5 Stages by Marketing Sources"
)

cornflower_source_color = cornflower[2]

colors = list(fig.data[0]['marker']['colors'])
sources = df_tree['Source'].dropna().unique()

for i, label in enumerate(fig.data[0]['labels']):
    if label in sources:
        colors[i] = cornflower_source_color

fig.data[0]['marker']['colors'] = tuple(colors)

fig.update_traces(
    texttemplate="<b>%{label}</b><br>%{value:,} deals<br>%{percentParent:.1%}",
    hovertemplate="<b>%{label}</b><br>%{value:,} deals<br>%{percentParent:.1%} of Source"
)

fig.update_layout(
    template='plotly_white',
    font=dict(size=13),
    title_font=dict(size=18),
    margin=dict(t=70, l=0, r=0, b=0),
    paper_bgcolor="rgba(0,0,0,0)",
    plot_bgcolor="rgba(0,0,0,0)"
)

save_plot('stages_by_marketing_sources', subfolder='notebooks')
fig.show()

for column in ['Quality', 'Stage', 'Source', 'Product']:
    summary = summarize_category(df_deals, column)

    log_section(f'=== {column} — Category Summary ===')
    display(HTML('<br>'))
    show_df(summary, name=f'{column}_summary', max_rows=12)
    display(HTML('<br>'))

    save_table_as_png(summary, name=f'{column}_summary', subfolder='notebooks')

cols = ['Quality', 'Product', 'Source','Stage']
palettes = ['Tomato', 'Cornflower', 'Yellowsoft', 'Lavender']

fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=[f"{col} — Category Distribution" for col in cols],
    horizontal_spacing=0.25,
    vertical_spacing=0.15
)

for i, (col, palette_group) in enumerate(zip(cols, palettes), start=1):
    summary = (
        df_deals[col]
        .value_counts(dropna=False)
        .rename_axis('Category')
        .reset_index(name='Count')
        .rename(columns={'Category': col})
    )

    total = summary['Count'].sum()
    summary['Percent'] = (summary['Count'] / total * 100).round(2)
    summary = summary.sort_values('Count', ascending=True)

    my_colors = get_my_palette(group=palette_group)

    row = (i - 1) // 2 + 1
    col_pos = (i - 1) % 2 + 1

    fig.add_trace(
        go.Bar(
            x=summary['Count'],
            y=summary[col],
            orientation='h',
            text=summary['Percent'].astype(str) + '%',
            textposition='outside',
            marker=dict(
                color=summary['Percent'],
                colorscale=my_colors,
                line=dict(color='white', width=1)
            ),
            name=col
        ),
        row=row, col=col_pos
    )
fig.update_traces(textposition='outside', cliponaxis=False)
fig.update_layout(margin=dict(l=80, r=150, t=80, b=50))

fig.update_layout(
    template='plotly_white',
    height=800,
    width=1200,
    showlegend=False,
    title_text='Category Distributions — Calls & Deals Summary',
    title_font=dict(size=20),
    font=dict(size=12),
)

fig.update_yaxes(title='', automargin=True)
fig.update_xaxes(title='Count')

save_plot('category_distribution', subfolder='notebooks')
fig.show()

cross = pd.crosstab(df_deals['Stage'], df_deals['Quality'], normalize='index') * 100

gradient_colors = [
    get_my_palette(group='Yellowsoft')[3],
    get_my_palette(group='Cornflower')[3],
    get_my_palette(group='Lavender')[3],
    get_my_palette(group='Lime Green')[3],
]
cmap_custom = LinearSegmentedColormap.from_list("smooth_custom", gradient_colors, N=256)

plt.figure(figsize=(10, 6))
sns.heatmap(
    cross,
    annot=True,
    fmt=".1f",
    cmap=cmap_custom,
    linewidths=0.5,
    linecolor='white',
    annot_kws={"size": 9},
    cbar_kws={"shrink": 0.8, "label": "Percent (%)"}
)

plt.title('Stage × Quality (%)', fontsize=13, fontweight='bold', pad=10)
plt.xlabel('Quality', fontsize=11)
plt.ylabel('Stage', fontsize=11)
plt.xticks(rotation=40, ha='right', fontsize=9)
plt.yticks(fontsize=9)
plt.tight_layout()

save_plot('stages_quality', subfolder='notebooks')
plt.show()

log_section('=== Saving results ===')
start_time = time.time()

save_table_as_png(calls, 'calls_stats_num', subfolder='notebooks')
save_table_as_png(compare_calls, 'calls_compare', subfolder='notebooks')
save_table_as_png(calls_new, 'calls_stats_cat', subfolder='notebooks')

save_table_as_png(contacts_new, 'contacts_stats_cat', subfolder='notebooks')

save_table_as_png(spend, 'spend_stats_num', subfolder='notebooks')
save_table_as_png(compare_imp, 'compare_imp', subfolder='notebooks')
save_table_as_png(compare_clicks, 'compare_clicks', subfolder='notebooks')
save_table_as_png(compare_spend, 'compare_spend', subfolder='notebooks')
save_table_as_png(spend_new, 'spend_stats_cat', subfolder='notebooks')

save_table_as_png(deals, 'deals_stats_num', subfolder='notebooks')
save_table_as_png(compare_iap, 'compare_iap', subfolder='notebooks')
save_table_as_png(compare_sla, 'compare_sla', subfolder='notebooks')
save_table_as_png(deals_new, 'deals_stats_cat', subfolder='notebooks')

logging.info(f'All files successfully saved in {time.time() - start_time:.2f} sec.')